import { Logic, Theme, Store, Util, Icons, SettingPreference, SettingProxy,  DeviceType, SettingDetailIndex } from "../def.slint";
import { IconBtn, SettingEntryV2, Head, SettingDetail, ToastStatus, About, Dialog, ComponentPosition } from "../../base/widgets.slint";
import { Preference } from "components/preference.slint";

component RightPanel inherits Rectangle {
    background: Theme.base-background;

    public function preference-get() -> SettingPreference {
        return preference.get();
    }

    preference := Preference {
        is-show-header: false;
    }
}

component Setting inherits Rectangle {
    public function save() -> bool {
        if (rp.preference-get().font-size == "" || rp.preference-get().win-width == "" || rp.preference-get().win-height == "") {
            Util.show-toast(Logic.tr("Input can not be empty"), ToastStatus.Warning);
            return false;
        }

        if (Store.device-type == DeviceType.Desktop) {
            Store.setting-preference.win-width = rp.preference-get().win-width;
            Store.setting-preference.win-height = rp.preference-get().win-height;
        }

        Store.setting-preference.font-size = rp.preference-get().font-size;
        Store.setting-preference.font-family = rp.preference-get().font-family;

        Logic.set-setting-preference(rp.preference-get());
        return true;
    }

    rp := RightPanel { }
}

export component SettingDialog inherits Dialog {
    title: Logic.tr("Setting");
    is-hide-bottom-btns: true;
    is-prevent-event-forward: true;

    in-out property <length> inner-height: 650px;

    setting := Setting {
        height: root.inner-height;
    }

    cancel-clicked => {
        setting.save();
        Logic.switch-setting-detail(SettingDetailIndex.None);
    }
}

export component AboutDialog inherits Dialog {
    title: Logic.tr("About");
    is-hide-bottom-btns: true;
    is-prevent-event-forward: true;

    in-out property <length> inner-height: 650px;

    About {
        height: root.inner-height;
        is-show-header: false;
    }

    cancel-clicked => {
        Logic.switch-setting-detail(SettingDetailIndex.None);
    }
}

export component SettingIconsBar inherits Rectangle {
    width: hbox.preferred-width;
    height: hbox.preferred-height;
    border-radius: Theme.border-radius;

    in-out property <bool> show-icon-hover-background: false;
    in-out property <length> icon-size: Theme.icon-size;
    in-out property <bool> is-show-tip: false;
    in-out property <ComponentPosition> tip-position;
    in-out property h-padding <=> hbox.padding;
    in-out property h-spacing <=> hbox.spacing;

    hbox := HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 4;

        IconBtn {
            icon: Icons.setting-fill;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("setting");

            clicked => {
                Logic.switch-setting-detail(SettingDetailIndex.Home);
            }
        }

        IconBtn {
            icon: Icons.about-fill;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("about");

            clicked => {
                Logic.switch-setting-detail(SettingDetailIndex.About);
            }
        }

        IconBtn {
            icon: Icons.github;
            icon-size: root.icon-size;
            show-icon-hover-background: root.show-icon-hover-background;
            is-show-tip: root.is-show-tip;
            tip-position: root.tip-position;
            tip: Logic.tr("github");

            clicked => {
                Util.open-url("Default","https://github.com/Heng30/stodo");
            }
        }
    }
}
